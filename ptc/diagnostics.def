/**
 * @file diagnostics.def
 * @author Marek Sedlacek
 * @brief Diagnostics messages for error reporting
 * @date 2023-04-20
 * 
 * @copyright Copyright (c) 2023
 * 
 */

#ifndef DIAG
#define DIAG(id, level, msg)
#endif

DIAG(ERR_VARDECL_REQUIRES_TYPE, Error, "variable declaration requires type.")
DIAG(ERR_SYM_ALREADY_DECLARED, Error, "symbol ‘{0}’ is already declared.")
DIAG(ERR_UNDEFINED_VAR, Error, "‘{0}’ is not defined.")
DIAG(ERR_UNDEFINED_TYPE, Error, "type ‘{0}’ is not defined.")
DIAG(ERR_INCORRECT_ARGS, Error, "incorrect arguments in a function call to ‘{0}’")
DIAG(ERR_INTERNAL, Error, "internal error. {0}.")
DIAG(ERR_INVALID_CONVERSION, Error, "invalid conversion from ‘{0}’ to ‘{1}’.")
DIAG(ERR_UNSUPPORTED_OP_TYPE, Error, "unsupported operand type(s) for ‘{0}’: ‘{1}’ and ‘{2}’.")
DIAG(ERR_NOT_CALLABLE, Error, "‘{0}’ is not callable.")
DIAG(ERR_LOOSE_RETURN, Error, "return can appear only inside of a function.")
DIAG(ERR_SYNTAX, Error, "{0}.")
DIAG(ERR_IF_COND_MUST_BE_BOOL, Error, "if statement condition must be bool, but is ‘{0}’.")
DIAG(ERR_WHILE_COND_MUST_BE_BOOL, Error, "while statement condition must be bool, but is ‘{0}’.")
DIAG(ERR_DUPL_STRUCT_MEMBER, Error, "duplicate member ‘{0}’ in struct ‘{1}’.")
DIAG(ERR_UNKNOWN_ESC_SEQ, Error, "unknown escape sequence ‘{0}’.")
DIAG(ERR_INCORRECT_RET_TYPE, Error, "incorrect return type in function ‘{0}’. Expected ‘{1}’, but got ‘{2}’")
DIAG(ERR_MISSING_RETURN, Error, "Missing return in function ‘{0}’.")
DIAG(ERR_MISSING_RETURN_IN_BRANCH, Error, "Missing return in a flow path in a function ‘{0}’.")
DIAG(ERR_NOT_A_TYPE, Error, "‘{0}’ is not a type.")
DIAG(ERR_BAD_STRUCT_ELEM, Error, "struct element access must be an identifier.")
DIAG(ERR_TYPE_NOT_STRUCT, Error, "type ‘{0}’ does not have members.")
DIAG(ERR_HAS_NO_MEMBER, Error, "‘{0}’ has no member ‘{1}’.")
DIAG(ERR_CANNOT_INFER_TYPE, Error, "Cannot infer type for ‘{0}’.")

DIAG(ERR_EXPECTED, Error, "expected ‘{0}’ but found ‘{1}’.")
//DIAG(note_module_identifier_declaration, Note, "module identifier declared here")
DIAG(WARN_AMBIGOUS_NEGATION, Warning, "negation is ambigous. Please consider using parenthesis.")

#undef DIAG