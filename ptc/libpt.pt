/**
 * Proto-typed standard library.
 * 
 * This file contains only non-internal functions,
 * not all functions in std library can be found here.
 * 
 * Author: Marek Sedlacek
 * Copyright (c) 2024 Marek Sedlacek
 * MIT licensed
 */

/***************************/
/*--- String functions ----*/
/***************************/

string mto_string(int? v) {
    if(v == none) {
        return "none"
    }
    int a = v
    return to_string(a)
}

string mto_string(float? v) {
    if(v == none) {
        return "none"
    }
    float a = v
    return to_string(a)
}

string mto_string(bool? v) {
    if(v == none) {
        return "none"
    }
    bool a = v
    return to_string(a)
}

string mto_string(string? v) {
    if(v == none) {
        return "none"
    }
    string a = v
    return a
}

int? to_int(string str) {
    return to_int_base(str, 10)
}

int abs(int x) {
    if(x < 0) return -x
    return x;
}

float abs(float x) {
    if(x < 0.0) return -x
    return x;
}

int sum(int[] arr) {
    int sumval = 0
    for(int i : arr) {
        sumval += i
    }
    return sumval
}

float sum(float[] arr) {
    float sumval = 0.0
    for(float i : arr) {
        sumval += i
    }
    return sumval
}

int gcd(int a, int b) {
    while(b != 0) {
        int old_b = b
        b = a % b
        a = old_b
    }
    return a
}

int lcm(int a, int b) {
    return abs(a * b) / gcd(a, b)
}

string upper(string s) {
    string r
    for(string c : s) {
        int o = ord(c)
        if(o > 96 and o < 123) {
            r ++= chr(o ^ 32);
        }
        else {
            r ++= c
        }
    }
    return r
}

string lower(string s) {
    string r
    for(string c : s) {
        int o = ord(c)
        if(o > 64 and o < 91) {
            r ++= chr(o ^ 32);
        }
        else {
            r ++= c
        }
    }
    return r
}

string reverse(string s) {
    string r
    for(int i : length(s) - 1 .. -1) {
        r ++= s[i]
    }
    return r
}

int find(string s1, string s2) {
    int ln = length(s1) - length(s2) + 1
    for(int i : 0,1..ln) {
        int j = 0
        while(j < length(s2)) {
            if(s1[i+j] != s2[j]) {
                break;
            }
            j += 1
        }
        if(j == length(s2)) return i;
    }
    return -1;
}

bool contains(string s1, string s2) {
    return find(s1, s2) != -1
}

string slice(string s, int start, int end) {
    string r
    for(int i : start..end) {
        r ++= s[i]
    }
    return r
}

string slice(string s, int start, int next, int end) {
    string r
    for(int i : start, next..end) {
        r ++= s[i]
    }
    return r
}

/************************/
/*--- Math functions ---*/
/************************/

/** π (Ludolph's number) */
float M_PI  = 3.14159265358979323851280895940618620443274267017841339111328125

/** e (Euler's number) */
float M_E   = 2.71828182845904523542816810799394033892895095050334930419921875

/** φ (Golden ratio = (1 + 5^0.5)/2) */
float M_PHI = 1.618033988749894848207210029666924810953787527978420257568359375

/** Euler-Mascheroni constant */
float M_EGAMMA = 0.57721566490153286554942724251304753124713897705078125


float nan() {
    return 0.0 / 0.0
}

float inf() {
    return 1.0 / 0.0
}

/****************/
/*--- Limits ---*/
/****************/

// Maximum int value
int INT_MAX = 0x7FFFFFFFFFFFFFFF

// Minimum int value
int INT_MIN = -0xFFFFFFFFFFFFFFFF

// Maximum float value, excluding inf
float FLOAT_MAX = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0

// Minimum float value (negative max value), excluding -inf
float FLOAT_MIN = -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0

/*********************/
/*--- Environment ---*/
/*********************/

float rand_float(float min, float max) {
    float div = 2147483647.0 / (max - min);
    return min + (rand_uint() / div)
}

float rand_float() {
    return rand_float(0.0, 1.0)
}

int rand_int(int min, int max) {
    int modval = max - min + 1
    return min + (rand_uint() % modval)
}

bool rand_bool() {
    int rnd = rand_int(0, 1)
    return rnd == 1
}

/**********************/
/*--- IO functions ---*/
/**********************/

struct File {
    string path
    string mode
    int handle
}

File open(string path, string mode) {
    File f = File{.path=path, .mode=mode}
    f.handle = fopen(path, mode)
    return f
}

bool close(File f) {
    return fclose(f.handle)
}

string read(File f) {
    string txt
    int c = fgetbyte(f)
    while(c != -1) {
        chr(c) // TODO: Remove once this bug is fixed
        txt ++= chr(c)
        c = fgetbyte(f);
    }
    return txt
}

string getc(File f) {
    string c = ""
    int b = fgetbyte(f)
    if(b != -1) {
        c = chr(b)
    }
    return c
}

string getc() {
    string c = ""
    int b = inputbyte()
    if(b != -1) {
        c = chr(b)
    }
    return c
}

string input() {
    string txt
    int c = inputbyte()
    while(c != -1 and c != 10) {
        txt ++= chr(c)
        c = inputbyte();
    }
    return txt
}

string input(string prompt) {
    print(prompt)
    return input()
}

string[] args

void add_arg_to_args(string a) {
    append(args, a)
}